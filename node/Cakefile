sys = require('sys')

RRD = require('./lib/rrd/lib/rrd').RRD
Collector= require('./lib/collector.coffee').Collector
Server= require('./lib/server.coffee').Server
GoogleCalendar = require('./lib/googleCalendar').GoogleCalendar

rrd_file = "./db/hot-or-not.rrd"
DateFormatter = require('./lib/dateFormatter').DateFormatter

task 'rrd:create', 'Create new RRD file', () ->
  console.log "Creating empty RRD file"

  ds1 = "DS:temperature:GAUGE:600:U:U"
  ds2 = "DS:target_temp:GAUGE:600:U:U"
  ds3 = "DS:state:GAUGE:600:U:U"
  rra_day = "RRA:AVERAGE:0.5:1:300"
  rra_month = "RRA:AVERAGE:0.5:31:300"
  new RRD(rrd_file).create([ds1, ds2, ds3, rra_day, rra_month], {}, printError)

task 'rrd:graph:day', 'Graph recent temps', () ->
  new RRD(rrd_file).graph("temp.png", [{name: "temperature", color: "#FF0000"}, {name: "target_temp", color: "#FF5500"}], {start: DateFormatter.rrd(new Date(new Date() - (1000*60*60*8)))}, printError)

task 'rrd:graph:week', 'Graph recent temps', () ->
  new RRD(rrd_file).graph("temp.png", [{name: "temperature", color: "#FF0000"}, {name: "target_temp", color: "#FF5500"}], {start: DateFormatter.rrd(new Date(new Date() - (1000*60*60*24*7)))}, printError)

task 'rrd:graph:month', 'Graph recent temps', () ->
  new RRD(rrd_file).graph("temp.png", [{name: "temperature", color: "#FF0000"}, {name: "target_temp", color: "#FF5500"}], {start: DateFormatter.rrd(new Date(new Date() - (1000*60*60*24*31)))}, printError)

task 'rrd:delete', 'Delete RRD file', () ->
  console.log "Dropping RRD file"
  new RRD(rrd_file).destroy printError

task 'rrd:redo', 'Recreate RRD file', () ->
  invoke 'rrd:delete'
  invoke 'rrd:create'

task 'rrd:demo_data', 'fill with lots of sample data', (options) ->
  invoke 'rrd:delete'
  ds1 = "DS:temperature:GAUGE:600:U:U"
  ds2 = "DS:target_temp:GAUGE:600:U:U"
  ds3 = "DS:state:GAUGE:600:U:U"
  rra_day = "RRA:AVERAGE:0.5:1:300"
  rra_month = "RRA:AVERAGE:0.5:31:300"

  oneMinute = 1000 * 60
  date = new Date(new Date() - oneMinute * 60 * 24 * 31)
  new RRD(rrd_file).create [ds1, ds2, ds3, rra_day, rra_month], {start: date}, () ->
    targetTemp = 68
    currentTemp = 68
    rrd = new RRD(rrd_file)
    iterationsRemaining = 60 * 24 * 31
    addToRRD(rrd, currentTemp, date, iterationsRemaining)

addToRRD = (rrd, currentTemp, date, iterationsRemaining) ->
  return if iterationsRemaining == 0
  oneMinute = 1000 * 60

  currentTemp = currentTemp + Math.round(Math.random() * 4 - 2)
  date = new Date(date.valueOf() + oneMinute)
  rrd.update date, currentTemp, 68, 0, () =>
    addToRRD(rrd, currentTemp, date, iterationsRemaining - 1)

task 'rrd:fetch_recent', 'fetch recent data', () ->
  start = DateFormatter.rrd(new Date(new Date() - (1000*60*60*24)))
  end = DateFormatter.rrd(new Date)
  new RRD(rrd_file).fetch start, end, (records) ->
    for record in records
      console.log record

task 'rrd:collect', 'listen for input on a file and push values to memcached', () ->
  new Collector(rrd_file, 3001)

task 'rrd:serve', 'Serve the app, and occasionally check for updates', () ->
  new Server(rrd_file, 3000)

task 'google', 'google', () ->
  google = new GoogleCalendar
  google.getDetailed()

printError = (err) ->
  console.log(" - #{err}") if err?

